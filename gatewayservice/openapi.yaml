openapi: 3.0.3
info:
  title: Wichat Gateway Service API
  description: |
    This API serves as the main entry point for the Wichat application, acting as a gateway to authentication, user, LLM, and game services.
    All requests from the webapp and external clients should be routed through this gateway.
  version: 1.0.0
  contact:
    name: Wichat Team
    url: https://github.com/arquisoft/wichat_en2b

servers:
  - url: http://localhost:8000
    description: Local development server

tags:
  - name: Authentication
    description: Endpoints for user authentication and 2FA
  - name: Users
    description: Endpoints for user management
  - name: LLM
    description: Endpoints for Large Language Model interactions
  - name: Game
    description: Endpoints for quiz and game features
  - name: Health
    description: Health check endpoint

paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      description: Returns the health status of the gateway service.
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK

  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: johndoe
                password:
                  type: string
                  example: mypassword
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Invalid credentials

  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      description: Registers a new user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [USER, ADMIN]
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Validation error

  /auth/enable2fa:
    post:
      tags: [Authentication]
      summary: Enable 2FA for a user
      description: Enables two-factor authentication for the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        '200':
          description: 2FA enabled
        '400':
          description: Bad request

  /verify2fa:
    post:
      tags: [Authentication]
      summary: Verify 2FA token
      description: Verifies a 2FA token for a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                token:
                  type: string
      responses:
        '200':
          description: 2FA verified
        '401':
          description: Invalid token

  /users:
    get:
      tags: [Users]
      summary: Get users
      description: Retrieves a list of users or a specific user by query.
      parameters:
        - in: query
          name: id
          schema:
            type: string
          required: false
          description: User ID to filter
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags: [Users]
      summary: Create a new user
      description: Creates a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created

  /users/{username}:
    patch:
      tags: [Users]
      summary: Update user password
      description: Updates the password for a user.
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password updated
        '400':
          description: Bad request

  /user/profile/picture:
    post:
      tags: [Users]
      summary: Upload profile picture
      description: Uploads a profile picture for a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                image:
                  type: string
                  description: Base64-encoded image
      responses:
        '200':
          description: Profile picture uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  profilePicture:
                    type: string
                    description: Path to the uploaded image

  /askllm:
    post:
      tags: [LLM]
      summary: Ask a question to the LLM
      description: Sends a question to the LLM service and returns the answer.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: The question or prompt for the LLM
      responses:
        '200':
          description: LLM response
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    type: string

  /quiz:
    get:
      tags: [Game]
      summary: Get all quizzes
      description: Retrieves all available quizzes.
      responses:
        '200':
          description: List of quizzes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quiz'
    post:
      tags: [Game]
      summary: Submit quiz answers
      description: Submits answers for a quiz.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                topic:
                  type: string
                answers:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Quiz results

  /quiz/allTopics:
    get:
      tags: [Game]
      summary: Get all quiz topics
      description: Retrieves all quiz topics.
      responses:
        '200':
          description: List of topics
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /quiz/{topic}:
    get:
      tags: [Game]
      summary: Get quiz by topic
      description: Retrieves quiz questions for a specific topic.
      parameters:
        - in: path
          name: topic
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Quiz questions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'

components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [USER, ADMIN]
    Quiz:
      type: object
      properties:
        topic:
          type: string
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
    Question:
      type: object
      properties:
        question:
          type: string
        answers:
          type: array
          items:
            type: string
        correctAnswer:
          type: string